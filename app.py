import logging
import os
import json
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from datetime import date

load_dotenv()
os.makedirs("data", exist_ok=True)
meter_label = {'cold': "–•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞üßä", 'hot': "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞üî•", 'light': "–°–≤–µ—Çüí°"}


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

DEBUG_FLAG = os.getenv("DEBUG_FLAG")

def user_input_is_correct(message):
    if len(message) != 1:
        return False
    if not message[0].isdigit():
        return False
    return True

def load_data_for_date(date):
    with open('data/data.json', 'r', encoding='utf-8') as f:
            file_data = json.load(f)
    return file_data[date]

def write_data_to_json_file(data):
    today = date.today().isoformat() # —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–∞–¥—ë–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º
    if not os.path.exists("data/data.json"):
        file_data = {}     
    else:
        with open('data/data.json', 'r', encoding='utf-8') as f:
            file_data = json.load(f)
    
    key, value = next(iter(data.items()))

    if today in file_data:
        file_data[today][key] = value
    else:
        file_data[today] = {key: value}

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –∑–Ω–∞—á–µ–Ω–∏—è
    with open('data/data.json', 'w', encoding='utf-8') as f:
        json.dump(file_data, f, indent=2, ensure_ascii=False)
            
async def handle_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_input = update.message.text.split(" ")
    cd = context.chat_data
    today = date.today().isoformat()

    if not user_input_is_correct(context.args):
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n" +
                                       "/cold <–∑–Ω–∞—á–µ–Ω–∏–µ> \n" +  
                                       "/hot <–∑–Ω–∞—á–µ–Ω–∏–µ> \n" +
                                       "/light <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return

    # 1) –ó–∞–ø–∏—Å—å –≤ data.json
    m_type = user_input[0][1:]
    m_value = user_input[1]
    write_data_to_json_file({m_type: m_value})
    
    # 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç—á—ë—Ç–∞, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥ –∑–∞ –¥–µ–Ω—å
    if cd.get('report_date') != today:
        initial = f"{date.today().strftime('%d.%m.%Y')}\n\n" + \
                  "‚ùå –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞üßä: --\n" + \
                  "‚ùå –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞üî•: --\n" + \
                  "‚ùå –°–≤–µ—Çüí°: --"
        msg = await context.bot.send_message(chat_id, initial)
        cd['report_date'] = today
        cd['report_msg_id'] = msg.message_id

    # 3) –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ data.json   
    day_data = load_data_for_date(today)

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    lines = []
    for m in ('cold','hot','light'):
        if m in day_data:
            lines.append(f"‚úÖ {meter_label[m]}: {day_data[m]}")
        else:
            lines.append(f"‚ùå {meter_label[m]}: --")
            
    # 5) –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_text = f"{date.today().strftime('%d.%m.%Y')}\n\n" + "\n".join(lines)
    await context.bot.edit_message_text(
        text=new_text,
        chat_id=chat_id,
        message_id=cd['report_msg_id']
    )

async def photo_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    

    # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ
    today = date.today().isoformat() 
    dir_path = os.path.join("data/photos", today)
    os.makedirs(dir_path, exist_ok=True)
    
    # 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 3. –¢–æ –Ω–µ –¥–∞—ë–º –±–æ–ª—å—à–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å
    existing = os.listdir(dir_path)
    if len(existing) >= 3:
        await context.bot.send_message(chat_id, "‚ÑπÔ∏è –£–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ 3 —Ñ–æ—Ç–æ —Å–µ–≥–æ–¥–Ω—è.")
        return
    
    # 3) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ-—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
    photo_list = update.message.photo
    largest_photo = photo_list[-1]
    file = await largest_photo.get_file()

    # 4) –ò–º—è —Ñ–∞–π–ª–∞: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file.file_id + i.jpg
    filename = f"{file.file_id}.jpg"
    file_path = os.path.join(dir_path, filename)

    # 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    await file.download_to_drive(file_path)

    # 6) –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(chat_id, f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: `{filename}`")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="I'm a bot, please talk to me!")

if __name__ == '__main__':
    application = ApplicationBuilder().token(os.getenv("TOKEN")).build()
    
    start_handler = CommandHandler('start', start)
    commans_handler = CommandHandler(['cold', 'hot', 'light'], handle_reading)
    photo_handler = MessageHandler(filters.PHOTO, photo_save)
    
    application.add_handler(start_handler)
    application.add_handler(commans_handler)
    application.add_handler(photo_handler)
    
    application.run_polling()